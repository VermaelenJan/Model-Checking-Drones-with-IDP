counter example for reaching home

Running verifications with the classical time theory.
Running verifications with the realistic battery.
Running verifications with the dynamic low power bound.
Model 1
=======
structure  : V {
  Distance = { 0..4 }
  FlyHeight = { 3..4 }
  GroundHeight = { 0..0 }
  Height = { 0..5 }
  Inspection = { Insp1; Insp2 }
  InspectionHeight = { 1..2 }
  Power = { 0..60 }
  PowerUsage = { 0..5 }
  RestrictedHeight = { 5..5 }
  Time = { 0..20 }
  AllPicturesTaken = {  }
  AtCriticalPower = { 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20 }
  AtFlyHeight = { 2; 3; 4; 5; 6; 7 }
  AtGroundHeight = { 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20 }
  AtHome = {  }
  AtInspection = { 0; 1; 2 }
  AtInspectionHeight = { 0; 1; 8; 9 }
  AtInspectionToDo = {  }
  AtLowPower = { 1; 2; 3; 4; 5; 6 }
  AtNormalPower = { 0 }
  AtRestrictedHeight = {  }
  AtTravelSpace = { 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20 }
  CN_DistanceToHome = { 2,0; 2,1; 2,3; 2,4; 3,0; 3,2; 3,3; 3,4; 4,0; 4,1; 4,3; 4,4; 5,0; 5,2; 5,3; 5,4; 6,0; 6,1; 6,3; 6,4 }
  CN_DistanceToRA = { 2,0; 2,1; 2,3; 2,4; 3,0; 3,2; 3,3; 3,4; 4,0; 4,1; 4,3; 4,4; 5,0; 5,2; 5,3; 5,4; 6,0; 6,1; 6,3; 6,4 }
  CN_DistanceToTarget = { 2,0; 2,1; 2,3; 2,4; 3,0; 3,2; 3,3; 3,4; 4,0; 4,1; 4,3; 4,4; 5,0; 5,2; 5,3; 5,4; 6,1; 6,2; 6,3; 6,4 }
  CN_Height = { 0,0; 0,1; 0,3; 0,4; 0,5; 1,0; 1,1; 1,2; 1,4; 1,5; 7,0; 7,1; 7,3; 7,4; 7,5; 8,0; 8,2; 8,3; 8,4; 8,5; 9,1; 9,2; 9,3; 9,4; 9,5 }
  CN_Location = { 2,Home; 2,Insp1; 2,Insp2 }
  C_DistanceToHome = { 2,2; 3,1; 4,2; 5,1; 6,2 }
  C_DistanceToRA = { 2,2; 3,1; 4,2; 5,1; 6,2 }
  C_DistanceToTarget = { 2,2; 3,1; 4,2; 5,1; 6,0 }
  C_Height = { 0,2; 1,3; 7,2; 8,1; 9,0 }
  C_Location = { 2,TravelSpace }
  C_Picture_Taken = {  }
  CloseToRA = { 4; 6 }
  NonDetDecreaseDistRA = { 2; 3; 4; 5; 6 }
  NonDetIncreaseDistRA = {  }
  NonDetMove = { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20 }
  Picture_Taken = { 0,Home; 0,Insp2; 0,TravelSpace; 1,Home; 1,Insp2; 1,TravelSpace; 2,Home; 2,Insp2; 2,TravelSpace; 3,Home; 3,Insp2; 3,TravelSpace; 4,Home; 4,Insp2; 4,TravelSpace; 5,Home; 5,Insp2; 5,TravelSpace; 6,Home; 6,Insp2; 6,TravelSpace; 7,Home; 7,Insp2; 7,TravelSpace; 8,Home; 8,Insp2; 8,TravelSpace; 9,Home; 9,Insp2; 9,TravelSpace; 10,Home; 10,Insp2; 10,TravelSpace; 11,Home; 11,Insp2; 11,TravelSpace; 12,Home; 12,Insp2; 12,TravelSpace; 13,Home; 13,Insp2; 13,TravelSpace; 14,Home; 14,Insp2; 14,TravelSpace; 15,Home; 15,Insp2; 15,TravelSpace; 16,Home; 16,Insp2; 16,TravelSpace; 17,Home; 17,Insp2; 17,TravelSpace; 18,Home; 18,Insp2; 18,TravelSpace; 19,Home; 19,Insp2; 19,TravelSpace; 20,Home; 20,Insp2; 20,TravelSpace }
  Picture_Taken_Init = { Home; Insp2; TravelSpace }
  BackLoopTime = 0
  Battery = { 0->30; 1->25; 2->20; 3->17; 4->14; 5->11; 6->8; 7->5; 8->3; 9->1; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0 }
  Battery_Init = 30
  ClosestInspectionLocationToDo = { 0->Insp1; 1->Insp1; 2->Insp1; 3->Insp1; 4->Insp1; 5->Insp1; 6->Insp1; 7->Insp1; 8->Insp1; 9->Insp1; 10->Insp1; 11->Insp1; 12->Insp1; 13->Insp1; 14->Insp1; 15->Insp1; 16->Insp1; 17->Insp1; 18->Insp1; 19->Insp1; 20->Insp1 }
  ClosestInspectionLocationToDo_Init = Insp1
  CriticalPower = 5
  Curr_DistanceToHome = { 0->3; 1->3; 2->3; 3->2; 4->1; 5->2; 6->1; 7->2; 8->2; 9->2; 10->2; 11->2; 12->2; 13->2; 14->2; 15->2; 16->2; 17->2; 18->2; 19->2; 20->2 }
  Curr_DistanceToRA = { 0->3; 1->3; 2->3; 3->2; 4->1; 5->2; 6->1; 7->2; 8->2; 9->2; 10->2; 11->2; 12->2; 13->2; 14->2; 15->2; 16->2; 17->2; 18->2; 19->2; 20->2 }
  Curr_DistanceToTarget = { 0->2; 1->3; 2->3; 3->2; 4->1; 5->2; 6->1; 7->0; 8->0; 9->0; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0 }
  Curr_Height = { 0->1; 1->2; 2->3; 3->3; 4->3; 5->3; 6->3; 7->3; 8->2; 9->1; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0 }
  Curr_Location = { 0->Insp2; 1->Insp2; 2->Insp2; 3->TravelSpace; 4->TravelSpace; 5->TravelSpace; 6->TravelSpace; 7->TravelSpace; 8->TravelSpace; 9->TravelSpace; 10->TravelSpace; 11->TravelSpace; 12->TravelSpace; 13->TravelSpace; 14->TravelSpace; 15->TravelSpace; 16->TravelSpace; 17->TravelSpace; 18->TravelSpace; 19->TravelSpace; 20->TravelSpace }
  DetourAssumption = 3
  DistanceBetween = { Home,Home->0; Home,Insp1->2; Home,Insp2->3; Insp1,Home->2; Insp1,Insp1->0; Insp1,Insp2->2; Insp2,Home->3; Insp2,Insp1->2; Insp2,Insp2->0 }
  DistanceToHome_Init = 3
  DistanceToRA_Init = 3
  DistanceToTarget_Init = 2
  Height_Init = 1
  LiftPower = 5
  Location_Init = Insp2
  LowPower = { 0->29; 1->31; 2->33; 3->30; 4->27; 5->30; 6->27; 7->30; 8->28; 9->26; 10->24; 11->24; 12->24; 13->24; 14->24; 15->24; 16->24; 17->24; 18->24; 19->24; 20->24 }
  LowerPower = 2
  MoveToPower = 3
  Next = { 0->1; 1->2; 2->3; 3->4; 4->5; 5->6; 6->7; 7->8; 8->9; 9->10; 10->11; 11->12; 12->13; 13->14; 14->15; 15->16; 16->17; 17->18; 18->19; 19->20 }
  NoOpPower = 1
  Plan = { 0->Lift; 1->Lift; 2->MoveTowardsTarget; 3->MoveTowardsTarget; 4->MoveAwayFromRA; 5->MoveTowardsTarget; 6->MoveAwayFromRA; 7->Lower; 8->Lower; 9->Lower; 10->NoOp; 11->NoOp; 12->NoOp; 13->NoOp; 14->NoOp; 15->NoOp; 16->NoOp; 17->NoOp; 18->NoOp; 19->NoOp; 20->NoOp }
  PowerUsageAt = { 0->5; 1->5; 2->3; 3->3; 4->3; 5->3; 6->3; 7->2; 8->2; 9->1; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0 }
  Start = 0
  StaticLowPower = 25
  TakePicturePower = 2
  Target = { 0->Insp1; 1->Home; 2->Home; 3->Home; 4->Home; 5->Home; 6->Home; 7->TravelSpace; 8->TravelSpace; 9->TravelSpace; 10->TravelSpace; 11->TravelSpace; 12->TravelSpace; 13->TravelSpace; 14->TravelSpace; 15->TravelSpace; 16->TravelSpace; 17->TravelSpace; 18->TravelSpace; 19->TravelSpace; 20->TravelSpace }
  Weight = 0
}