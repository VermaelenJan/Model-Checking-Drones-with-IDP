Note: remove the bound on non-determinism (weight = 0 is not used, infinity instead)!

Running verifications with the back loop time theory.
Running verifications with the dummy battery.
Running verifications with the static low power bound.
Model 1
=======
structure  : V {
  Distance = { 0..5 }
  FlyHeight = { 3..4 }
  GroundHeight = { 0..0 }
  Height = { 0..5 }
  Inspection = { Insp1 }
  InspectionHeight = { 1..2 }
  Power = { 0..40 }
  PowerUsage = { 0..5 }
  RestrictedHeight = { 5..5 }
  Time = { 0..30 }
  AllPicturesTaken = {  }
  AtCriticalPower = {  }
  AtFlyHeight = {  }
  AtGroundHeight = { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30 }
  AtHome = { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30 }
  AtInspection = {  }
  AtInspectionHeight = {  }
  AtInspectionToDo = {  }
  AtLowPower = {  }
  AtNormalPower = { 0; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30 }
  AtRestrictedHeight = {  }
  AtTravelSpace = {  }
  CN_DistanceToHome = {  }
  CN_DistanceToRA = {  }
  CN_DistanceToTarget = {  }
  CN_Height = {  }
  CN_Location = {  }
  C_DistanceToHome = {  }
  C_DistanceToRA = {  }
  C_DistanceToTarget = {  }
  C_Height = {  }
  C_Location = {  }
  C_Picture_Taken = {  }
  CloseToRA = {  }
  NonDetDecreaseDistRA = {  }
  NonDetIncreaseDistRA = {  }
  NonDetMove = {  }
  Picture_Taken = {  }
  Picture_Taken_Init = {  }
  BackLoopTime = 2
  Battery = { 0->40; 1->40; 2->40; 3->40; 4->40; 5->40; 6->40; 7->40; 8->40; 9->40; 10->40; 11->40; 12->40; 13->40; 14->40; 15->40; 16->40; 17->40; 18->40; 19->40; 20->40; 21->40; 22->40; 23->40; 24->40; 25->40; 26->40; 27->40; 28->40; 29->40; 30->40 }
  Battery_Init = 40
  ClosestInspectionLocationToDo = { 0->Insp1; 1->Insp1; 2->Insp1; 3->Insp1; 4->Insp1; 5->Insp1; 6->Insp1; 7->Insp1; 8->Insp1; 9->Insp1; 10->Insp1; 11->Insp1; 12->Insp1; 13->Insp1; 14->Insp1; 15->Insp1; 16->Insp1; 17->Insp1; 18->Insp1; 19->Insp1; 20->Insp1; 21->Insp1; 22->Insp1; 23->Insp1; 24->Insp1; 25->Insp1; 26->Insp1; 27->Insp1; 28->Insp1; 29->Insp1; 30->Insp1 }
  ClosestInspectionLocationToDo_Init = Insp1
  CriticalPower = 5
  Curr_DistanceToHome = { 0->0; 1->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 8->0; 9->0; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0; 21->0; 22->0; 23->0; 24->0; 25->0; 26->0; 27->0; 28->0; 29->0; 30->0 }
  Curr_DistanceToRA = { 0->2; 1->2; 2->2; 3->2; 4->2; 5->2; 6->2; 7->2; 8->2; 9->2; 10->2; 11->2; 12->2; 13->2; 14->2; 15->2; 16->2; 17->2; 18->2; 19->2; 20->2; 21->2; 22->2; 23->2; 24->2; 25->2; 26->2; 27->2; 28->2; 29->2; 30->2 }
  Curr_DistanceToTarget = { 0->2; 1->2; 2->2; 3->2; 4->2; 5->2; 6->2; 7->2; 8->2; 9->2; 10->2; 11->2; 12->2; 13->2; 14->2; 15->2; 16->2; 17->2; 18->2; 19->2; 20->2; 21->2; 22->2; 23->2; 24->2; 25->2; 26->2; 27->2; 28->2; 29->2; 30->2 }
  Curr_Height = { 0->0; 1->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 8->0; 9->0; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0; 21->0; 22->0; 23->0; 24->0; 25->0; 26->0; 27->0; 28->0; 29->0; 30->0 }
  Curr_Location = { 0->Home; 1->Home; 2->Home; 3->Home; 4->Home; 5->Home; 6->Home; 7->Home; 8->Home; 9->Home; 10->Home; 11->Home; 12->Home; 13->Home; 14->Home; 15->Home; 16->Home; 17->Home; 18->Home; 19->Home; 20->Home; 21->Home; 22->Home; 23->Home; 24->Home; 25->Home; 26->Home; 27->Home; 28->Home; 29->Home; 30->Home }
  DetourAssumption = 1
  DistanceBetween = { Home,Home->0; Home,Insp1->2; Insp1,Home->2; Insp1,Insp1->0 }
  DistanceToHome_Init = 0
  DistanceToRA_Init = 2
  DistanceToTarget_Init = 2
  Height_Init = 0
  LiftPower = 5
  Location_Init = Home
  LowPower = { 0->25; 1->25; 2->25; 3->25; 4->25; 5->25; 6->25; 7->25; 8->25; 9->25; 10->25; 11->25; 12->25; 13->25; 14->25; 15->25; 16->25; 17->25; 18->25; 19->25; 20->25; 21->25; 22->25; 23->25; 24->25; 25->25; 26->25; 27->25; 28->25; 29->25; 30->25 }
  LowerPower = 2
  MoveToPower = 3
  Next = { 0->1; 1->2; 2->3; 3->4; 4->5; 5->6; 6->7; 7->8; 8->9; 9->10; 10->11; 11->12; 12->13; 13->14; 14->15; 15->16; 16->17; 17->18; 18->19; 19->20; 20->21; 21->22; 22->23; 23->24; 24->25; 25->26; 26->27; 27->28; 28->29; 29->30; 30->2 }
  NoOpPower = 1
  Plan = { 0->Lift; 1->Lift; 2->Lift; 3->Lift; 4->Lift; 5->Lift; 6->Lift; 7->Lift; 8->Lift; 9->Lift; 10->Lift; 11->Lift; 12->Lift; 13->Lift; 14->Lift; 15->Lift; 16->Lift; 17->Lift; 18->Lift; 19->Lift; 20->Lift; 21->Lift; 22->Lift; 23->Lift; 24->Lift; 25->Lift; 26->Lift; 27->Lift; 28->Lift; 29->Lift; 30->Lift }
  PowerUsageAt = { 0->0; 1->0; 2->0; 3->0; 4->0; 5->0; 6->0; 7->0; 8->0; 9->0; 10->0; 11->0; 12->0; 13->0; 14->0; 15->0; 16->0; 17->0; 18->0; 19->0; 20->0; 21->0; 22->0; 23->0; 24->0; 25->0; 26->0; 27->0; 28->0; 29->0; 30->0 }
  Start = 0
  StaticLowPower = 25
  TakePicturePower = 2
  Target = { 0->Insp1; 1->Insp1; 2->Insp1; 3->Insp1; 4->Insp1; 5->Insp1; 6->Insp1; 7->Insp1; 8->Insp1; 9->Insp1; 10->Insp1; 11->Insp1; 12->Insp1; 13->Insp1; 14->Insp1; 15->Insp1; 16->Insp1; 17->Insp1; 18->Insp1; 19->Insp1; 20->Insp1; 21->Insp1; 22->Insp1; 23->Insp1; 24->Insp1; 25->Insp1; 26->Insp1; 27->Insp1; 28->Insp1; 29->Insp1; 30->Insp1 }
  Weight = 0
}